name: Staging Deployment

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: planning_center_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/planning_center_test

      - name: Run type checking
        run: npm run typecheck

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/planning_center_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: staging-dist
          path: dist/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render Staging
        if: vars.ENABLE_STAGING_RENDER == 'true'
        run: |
          echo "Triggering Render staging deployment..."
          curl -X POST "${{ secrets.RENDER_STAGING_DEPLOY_HOOK_URL }}" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}'

      - name: Wait for staging deployment
        run: |
          echo "Waiting for staging deployment to complete..."
          sleep 60
          
      - name: Verify staging deployment
        run: |
          echo "Verifying staging deployment health..."
          curl -f "${{ secrets.RENDER_STAGING_APP_URL }}/health" || exit 1
          echo "‚úÖ Staging deployment successful!"

      - name: Deploy to Railway Staging
        if: vars.ENABLE_STAGING_RAILWAY == 'true'
        run: |
          npm install -g @railway/cli
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway up --service ${{ secrets.RAILWAY_STAGING_SERVICE_ID }}

      - name: Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging environment..."
          # Add your smoke tests here
          curl -f "${{ secrets.RENDER_STAGING_APP_URL }}/health"
          echo "‚úÖ Smoke tests passed!"

  deploy-staging-frontend:
    name: Deploy Frontend to Staging
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/frontend/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd frontend/frontend
          npm ci

      - name: Build frontend for staging
        run: |
          cd frontend/frontend
          npm run build
        env:
          VITE_API_URL: ${{ secrets.STAGING_FRONTEND_API_URL }}
          VITE_WS_URL: ${{ secrets.STAGING_FRONTEND_WS_URL }}

      - name: Deploy frontend to Vercel staging
        if: vars.ENABLE_STAGING_FRONTEND_VERCEL == 'true'
        run: |
          cd frontend/frontend
          npx vercel --token ${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_STAGING_FRONTEND_PROJECT_ID }}

  notify-staging:
    name: Notify Staging Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-staging-frontend]
    if: always() && github.ref == 'refs/heads/develop'

    steps:
      - name: Notify Success
        if: ${{ contains(needs.*.result, 'success') && !contains(needs.*.result, 'failure') }}
        run: |
          echo "üéâ Staging deployment completed successfully!"
          
      - name: Notify Failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "‚ùå Staging deployment failed!"
          exit 1

      - name: Discord Staging Notification
        if: vars.ENABLE_DISCORD_NOTIFICATIONS == 'true'
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            üèóÔ∏è **Planning Center MCP Staging Deployment**
            
            **Status**: ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            **Branch**: `${{ github.ref_name }}`
            **Commit**: [`${{ github.sha }}`](${{ github.event.head_commit.url }})
            **Author**: ${{ github.event.head_commit.author.name }}
            **Environment**: üß™ Staging
            
            **Staging URL**: ${{ secrets.RENDER_STAGING_APP_URL }}
            **Frontend URL**: ${{ secrets.STAGING_FRONTEND_URL }}