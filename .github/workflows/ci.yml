name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: planning_center_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/planning_center_test

      - name: Run type checking
        run: npm run typecheck

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/planning_center_test
          TEST_DATABASE_URL: postgresql://postgres:password@localhost:5432/planning_center_test
          REDIS_URL: redis://localhost:6379
          TEST_REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-testing-only
          COOKIE_SECRET: test-cookie-secret-32-characters-long
          ENCRYPTION_KEY: 12345678901234567890123456789012

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/planning-center-mcp:latest
            ${{ secrets.DOCKER_USERNAME }}/planning-center-mcp:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-render:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        run: |
          echo "Triggering Render deployment..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}'

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          
      - name: Verify deployment
        run: |
          echo "Verifying deployment health..."
          curl -f "${{ secrets.RENDER_APP_URL }}/health" || exit 1
          echo "✅ Deployment successful!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "🚀 Successfully deployed to Render at ${{ secrets.RENDER_APP_URL }}"

  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && vars.ENABLE_RAILWAY_DEPLOY == 'true'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway up --service ${{ secrets.RAILWAY_SERVICE_ID }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Verify Railway deployment
        run: |
          echo "Verifying Railway deployment..."
          sleep 30
          curl -f "${{ secrets.RAILWAY_APP_URL }}/health" || exit 1
          echo "✅ Railway deployment successful!"

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && vars.ENABLE_VERCEL_DEPLOY == 'true'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        run: |
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  deploy-docker:
    name: Deploy via Docker
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main' && vars.ENABLE_DOCKER_DEPLOY == 'true'
    environment: production

    steps:
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # Pull latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/planning-center-mcp:latest
            
            # Stop existing container
            docker stop planning-center-mcp || true
            docker rm planning-center-mcp || true
            
            # Start new container
            docker run -d \
              --name planning-center-mcp \
              --restart unless-stopped \
              -p 3001:3001 \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e REDIS_URL="${{ secrets.REDIS_URL }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e COOKIE_SECRET="${{ secrets.COOKIE_SECRET }}" \
              -e ENCRYPTION_KEY="${{ secrets.ENCRYPTION_KEY }}" \
              -e PCO_CLIENT_ID="${{ secrets.PCO_CLIENT_ID }}" \
              -e PCO_CLIENT_SECRET="${{ secrets.PCO_CLIENT_SECRET }}" \
              -e FRONTEND_URL="${{ secrets.FRONTEND_URL }}" \
              -e NODE_ENV=production \
              ${{ secrets.DOCKER_USERNAME }}/planning-center-mcp:latest
            
            # Wait for container to start
            sleep 10
            
            # Health check
            curl -f http://localhost:3001/health || exit 1
            echo "✅ Docker deployment successful!"

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/frontend/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd frontend/frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend/frontend
          npm run build
        env:
          VITE_API_URL: ${{ secrets.FRONTEND_API_URL }}
          VITE_WS_URL: ${{ secrets.FRONTEND_WS_URL }}

      - name: Deploy frontend to Vercel
        if: vars.ENABLE_FRONTEND_VERCEL == 'true'
        run: |
          cd frontend/frontend
          npx vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_FRONTEND_PROJECT_ID }}

      - name: Deploy frontend to Netlify
        if: vars.ENABLE_FRONTEND_NETLIFY == 'true'
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './frontend/frontend/dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-render, deploy-railway, deploy-vercel, deploy-docker, deploy-frontend]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify Success
        if: ${{ contains(needs.*.result, 'success') && !contains(needs.*.result, 'failure') }}
        run: |
          echo "🎉 All deployments completed successfully!"
          
      - name: Notify Failure
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "❌ One or more deployments failed!"
          exit 1

      - name: Discord Notification
        if: vars.ENABLE_DISCORD_NOTIFICATIONS == 'true'
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🚀 **Planning Center MCP Deployment**
            
            **Status**: ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}
            **Branch**: `${{ github.ref_name }}`
            **Commit**: [`${{ github.sha }}`](${{ github.event.head_commit.url }})
            **Author**: ${{ github.event.head_commit.author.name }}
            
            **Deployments**:
            • Render: ${{ needs.deploy-render.result || 'skipped' }}
            • Railway: ${{ needs.deploy-railway.result || 'skipped' }}
            • Vercel: ${{ needs.deploy-vercel.result || 'skipped' }}
            • Docker: ${{ needs.deploy-docker.result || 'skipped' }}
            • Frontend: ${{ needs.deploy-frontend.result || 'skipped' }}